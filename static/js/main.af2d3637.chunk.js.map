{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","onClick","state","card","id","react_default","a","createElement","className","concat","key","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","i","cards","slice","compare","setState","undefined","obj1","push","obj2","value","console","log","createNewGame","length","j","Math","floor","random","shuffle","renderSquares","map","d","components_Square","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af2d3637.chunk.js","sourcesContent":["import React from 'react'\r\nimport './All.css'\r\n\r\nconst Square = ({onClick, state, card, id}) => {\r\n  return (\r\n    <div \r\n      onClick={onClick}\r\n      className={`square ${state}`}\r\n      key={id}\r\n    >\r\n      {card}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Square\r\n\r\n","import React, {Component} from 'react';\r\nimport './All.css'\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: [],\r\n      compare: []\r\n    }\r\n  }\r\n  // onClick = if arr[0] === arr[1] then class .showing,\r\n  //   otherwise class .hidden\r\n  handleClick = (i) => {\r\n    let cards = this.state.cards.slice();\r\n    let compare = this.state.compare;\r\n\r\n    cards[i].state = 'showing';\r\n    this.setState({cards});\r\n\r\n    if (compare[0]===undefined) {\r\n      let obj1 = {};\r\n      obj1 = cards[i];\r\n      compare.push(obj1);\r\n      this.setState({compare});\r\n      return;\r\n    } else if (compare[1]===undefined) \r\n        {\r\n        let obj2 = {};\r\n        obj2 = cards[i];\r\n        compare.push(obj2);\r\n\r\n        if (compare[0].value===compare[1].value) {\r\n          // console.log('good');\r\n          cards[compare[0].id].state = 'matched';\r\n          cards[compare[1].id].state = 'matched';\r\n          this.setState({compare: [], cards})\r\n        } else {\r\n          // console.log('wrong');\r\n          cards[compare[0].id].state = 'hidden';\r\n          cards[compare[1].id].state = 'hidden';\r\n          this.setState({compare: [], cards});\r\n        }\r\n    }\r\n    console.log(compare)\r\n\r\n    // let card1 = cards[i].value;\r\n    // if (this.state.card[i])\r\n  }\r\n\r\n  createNewGame = () => {\r\n    let cards = []\r\n    for (let i=0; i<16; i++) {\r\n      cards.push({id:i, state:'hidden', value:i+1})\r\n      if (cards[i].value % 2 === 0) {\r\n        cards[i].value = cards[i].value-1;\r\n      }\r\n    }\r\n    // copy of Fisherâ€“Yates shuffle algorithm\r\n    function shuffle(a) {\r\n      for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i].id, a[j]].id = [a[j].id, a[i].id];\r\n            [a[i].value, a[j].value] = [a[j].value, a[i].value];\r\n        }\r\n        return a;\r\n    }\r\n    shuffle(cards)\r\n    this.setState({cards})\r\n  }\r\n  renderSquares = () => {\r\n    return (\r\n      this.state.cards.map((d, i)=> {\r\n        return (\r\n          <Square\r\n            onClick={()=> this.handleClick(i)}\r\n            state={this.state.cards[i].state}\r\n            card={d.value}\r\n            id={d.id}\r\n          />\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <button onClick={this.createNewGame}>Create New Game</button>\r\n        <div className='gameboard'>\r\n          {this.renderSquares()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\n// import './components/All.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='game'>\n        <Board/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}